<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Lam Pui 的个人博客</title>
    <description>Write an awesome description for your new site here. You can edit this line in _config.yml. It will appear in your document head meta (for Google search results) and in your feed.xml site description.
</description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Sat, 26 Aug 2017 13:52:57 +0800</pubDate>
    <lastBuildDate>Sat, 26 Aug 2017 13:52:57 +0800</lastBuildDate>
    <generator>Jekyll v3.5.2</generator>
    
      <item>
        <title>最近翻译的两篇软文</title>
        <description>&lt;p&gt;今天刷了两道LeetCode，两题难度都是 Easy 级别，不出意外地选择了用 JavaScript 去做，其中 No.136 Single Number 这题参考了讨论区的答案，只有一行代码，被惊艳到了，想研究一下。&lt;/p&gt;
&lt;pre&gt;
var singleNumber = function(nums) {
    return nums.reduce((a, b) =&amp;gt; a^b);
}
&lt;/pre&gt;
&lt;!-- more --&gt;
&lt;p&gt;首先看题目的描述&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;Given an array of integers, every element appears twice except for one. Find that single one.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;Note:
Your algorithm should have a linear runtime complexity. Could you implement it without using extra memory?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;题目中文大意是说：给出一个整型数组，除了1个元素只出现1次，其他元素都出现2次，找出只出现1次的这个元素。
我当时想得很简单，分别对每个元素从前和从后开始找它的索引，那么对于出现2次的元素，该元素会有两个不同的索引，对于只出现1次的元素，该元素只有一个索引。见代码实现：&lt;/p&gt;
&lt;pre&gt;
var singleNumber = function(nums) {
    var result;
    nums.forEach(function(element) {
        if (nums.indexOf(element) === nums.lastIndexOf(element)) {
            result = element;
        }
    });
    return result
}    
&lt;/pre&gt;

&lt;p&gt;上面这段代码粗略一看还好，经过一些简单的用例测试，也没出现什么问题，但当我提交的时候却返回了 Time Limit Exceed，回过头来再看看，问题出现在了 forEach() 循环里面，在已经找到后，应该停止遍历，但是根据&lt;a href=&quot;https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach&quot;&gt;MDN文档&lt;/a&gt;上说的&lt;strong&gt;没有办法中止或者跳出 forEach 循环，除了抛出一个异常&lt;/strong&gt;，所以出现了耗费资源的情况。&lt;/p&gt;

&lt;p&gt;再看看题目的提示，a linear runtime complexity, without using extra memory
知道了问题所在，去参考了讨论区，得到了下面精湛的解答&lt;/p&gt;
&lt;pre&gt;
var singleNumber = function(nums) {
    return nums.reduce((a, b) =&amp;gt; a^b);
}
&lt;/pre&gt;
&lt;p&gt;一目了然，上面的代码用上了ES6 的箭头函数，这里不讨论它，有兴趣可以看&lt;a href=&quot;http://es6.ruanyifeng.com/#docs/function#箭头函数&quot;&gt;阮老师对它的介绍&lt;/a&gt;，妙的地方是在reduce()函数和异或运算的使用。&lt;/p&gt;
&lt;pre&gt;
var singleNumber = function(nums) {
    return nums.reduce(function(a,b) {
        return a^b;
    })
}
&lt;/pre&gt;
&lt;p&gt;这里reduce()的回调函数只给了2个参数，一个是a，累加器(accumulator，理解为结果叠加)，另一个是b，当前遍历到的数组元素。由于reduce()函数只有一个回调函数作参数，所以这里a的初始值为数组第一个元素的值，b的初始值为数组第二个元素的值，每一次进行a^b运算都将结果赋给a。假设有[2,3,8,7,8,3,2]这么一个数组，具体执行其实就是&lt;/p&gt;
&lt;pre&gt;
((((((2^3)^8)^7)^8)^3)^2)
=(2^2)^(3^3)^(8^8)^(7)//异或运算结合律(试想加法结合律)
=(0)^(0)^(0)^(7)
=7
&lt;/pre&gt;
</description>
        <pubDate>Sat, 26 Aug 2017 08:57:45 +0800</pubDate>
        <link>http://localhost:4000/%E9%96%8B%E7%99%BC%E8%80%85/2017/08/26/%E6%9C%80%E8%BF%91%E7%BF%BB%E8%AF%91%E7%9A%84%E4%B8%A4%E7%AF%87%E8%BD%AF%E6%96%87.html</link>
        <guid isPermaLink="true">http://localhost:4000/%E9%96%8B%E7%99%BC%E8%80%85/2017/08/26/%E6%9C%80%E8%BF%91%E7%BF%BB%E8%AF%91%E7%9A%84%E4%B8%A4%E7%AF%87%E8%BD%AF%E6%96%87.html</guid>
        
        
        <category>開發者</category>
        
      </item>
    
      <item>
        <title>刷LeetCode No.136</title>
        <description>&lt;p&gt;今天刷了两道LeetCode，两题难度都是 Easy 级别，不出意外地选择了用 JavaScript 去做，其中 No.136 Single Number 这题参考了讨论区的答案，只有一行代码，被惊艳到了，想研究一下。&lt;/p&gt;
&lt;pre&gt;
var singleNumber = function(nums) {
    return nums.reduce((a, b) =&amp;gt; a^b);
}
&lt;/pre&gt;
&lt;!-- more --&gt;
&lt;p&gt;首先看题目的描述&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;Given an array of integers, every element appears twice except for one. Find that single one.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;Note:
Your algorithm should have a linear runtime complexity. Could you implement it without using extra memory?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;题目中文大意是说：给出一个整型数组，除了1个元素只出现1次，其他元素都出现2次，找出只出现1次的这个元素。
我当时想得很简单，分别对每个元素从前和从后开始找它的索引，那么对于出现2次的元素，该元素会有两个不同的索引，对于只出现1次的元素，该元素只有一个索引。见代码实现：&lt;/p&gt;
&lt;pre&gt;
var singleNumber = function(nums) {
    var result;
    nums.forEach(function(element) {
        if (nums.indexOf(element) === nums.lastIndexOf(element)) {
            result = element;
        }
    });
    return result
}    
&lt;/pre&gt;

&lt;p&gt;上面这段代码粗略一看还好，经过一些简单的用例测试，也没出现什么问题，但当我提交的时候却返回了 Time Limit Exceed，回过头来再看看，问题出现在了 forEach() 循环里面，在已经找到后，应该停止遍历，但是根据&lt;a href=&quot;https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach&quot;&gt;MDN文档&lt;/a&gt;上说的&lt;strong&gt;没有办法中止或者跳出 forEach 循环，除了抛出一个异常&lt;/strong&gt;，所以出现了耗费资源的情况。&lt;/p&gt;

&lt;p&gt;再看看题目的提示，a linear runtime complexity, without using extra memory
知道了问题所在，去参考了讨论区，得到了下面精湛的解答&lt;/p&gt;
&lt;pre&gt;
var singleNumber = function(nums) {
    return nums.reduce((a, b) =&amp;gt; a^b);
}
&lt;/pre&gt;
&lt;p&gt;一目了然，上面的代码用上了ES6 的箭头函数，这里不讨论它，有兴趣可以看&lt;a href=&quot;http://es6.ruanyifeng.com/#docs/function#箭头函数&quot;&gt;阮老师对它的介绍&lt;/a&gt;，妙的地方是在reduce()函数和异或运算的使用。&lt;/p&gt;
&lt;pre&gt;
var singleNumber = function(nums) {
    return nums.reduce(function(a,b) {
        return a^b;
    })
}
&lt;/pre&gt;
&lt;p&gt;这里reduce()的回调函数只给了2个参数，一个是a，累加器(accumulator，理解为结果叠加)，另一个是b，当前遍历到的数组元素。由于reduce()函数只有一个回调函数作参数，所以这里a的初始值为数组第一个元素的值，b的初始值为数组第二个元素的值，每一次进行a^b运算都将结果赋给a。假设有[2,3,8,7,8,3,2]这么一个数组，具体执行其实就是&lt;/p&gt;
&lt;pre&gt;
((((((2^3)^8)^7)^8)^3)^2)
=(2^2)^(3^3)^(8^8)^(7)//异或运算结合律(试想加法结合律)
=(0)^(0)^(0)^(7)
=7
&lt;/pre&gt;
</description>
        <pubDate>Mon, 31 Jul 2017 03:05:48 +0800</pubDate>
        <link>http://localhost:4000/%E9%96%8B%E7%99%BC%E8%80%85/2017/07/31/%E5%88%B7LeetCode-No-136.html</link>
        <guid isPermaLink="true">http://localhost:4000/%E9%96%8B%E7%99%BC%E8%80%85/2017/07/31/%E5%88%B7LeetCode-No-136.html</guid>
        
        
        <category>開發者</category>
        
      </item>
    
      <item>
        <title>记广州老人院一行</title>
        <description>&lt;p&gt;  2017年04月27日，我跟班里的几位朋友去了广州市老人院，这是我有史以来第一次去老人院。广州市老人院坐落于广州市从化区，也就离我们学校大概两首歌的车程，下了车后，由于那条在建的地铁14号线，我们不得不绕了一小段路才过到对面的马路。老人院的正门在装修，但给人一眼看过去的感觉却像是在拆迁。
&lt;!-- more --&gt;
  我们来到了另外的一道门口，门口的保安看见我们一群人成群结队地走过来，依然是不慌不忙悠闲地坐着在那里喝茶，也许他早就习以为常了这样的学生义工队伍吧，又也许是我们长得太帅太有安全感？满怀着一番好奇兼一丝畏惧，我跟着大部队一起踏进了这间老人院，好奇自然没什么可说的，畏惧是怕遇到一些帕金森患者找我聊天我该怎么办？万一把我当成了他们回忆中的某一位，我是撒腿就跑还是像电影里演的那样来一场临时演出呢，谁知道。&lt;/p&gt;

&lt;p&gt;  我们向着那间目标教室迈步，对，教室，我们原来是去教老人用电脑，用手机，学英语的，这会真的是非常骨感地感受到了活到老，学到老啊！沿着这间老人院的小路上，在我的右手边，是一幢又一幢的大楼，几幢大楼都有属于它们的名字，因为这几幢大楼都分别是某某某，某某某等捐赠的，从楼墙上的大大的红字就知道了，这要是在上个世纪，在墙上写大大的红字的也还只是某党宣传政治思想的特权，看来现在的社会开放了许多呀。看向一楼，隔着那些透明玻璃，依稀能看到一些医疗设备，一些护士，路上也能碰上一两个拄着拐杖的老人，他看了一下我们，我们看了一下他，大家继续赶自己的路，我们走得比较快，可能错过了很多风景，他走得比较慢，可能看过了很多风景吧。&lt;/p&gt;

&lt;p&gt;  来到这间教室，迎面向我们走来的应该是这里的管事吧，她还抱怨我们来得太迟，那些老人们都已经在等着我们呢，当时我还觉得挺抱歉的，但后来就不这么觉得了！这里有3间教室可供我们去施教，分别是电脑，手机和英语 。我跟同伴往这三个地方逛了逛，身为软件系的我们，首先就去看了看电脑室，里面的电脑屈指可数，已经有两位老人在用了，但其中有一位看到我们进来后，不久就走了，而另一位老人也已经有人在教了，我们感觉没戏，转身到教手机和教英语的两间课室，教英语的也已经容纳不下我们两人，唯有在教手机那间教室转悠，三间课室就数教手机的这间面积最大。&lt;/p&gt;

&lt;p&gt;  很快，我们就有了施展自己“玩手机”本领的机会，一位阿嫲拿着手机慢步走进来，闲的快发霉的我主动地找上了她，坐下后，她说她女儿发给她的相片不见了，问我有没有什么办法恢复，起初我觉得应该是找不到而已，但后来才发现原来是她真的删了，那我也没办法了，之后我们继续聊，她说自己的手机很卡，我就给她装了个垃圾清理软件，也只能尽自己的绵薄之力，讲得太深又怕她听不懂。给她装了两个软件后，我们互相说了一些客气话后，她开始自己慢慢琢磨起自己的手机，我过去看了看另一位阿嫲。这位阿嫲是手机输入法的问题，她想使用语音输入，但输入法没有。之后就是一堆一堆的操作。&lt;/p&gt;

&lt;p&gt;  在这次的施教中，在这次的“跨世纪”交流中，我想起了那部电影《桃姐》，桃姐为梁家服伺了四代人，后来，梁家有的人移民有的去世了，近十年只有梁家少爷Roger和桃姐一起生活，等到桃姐老了，中风了，桃姐想住老人院，Roger送她进了老人院。本来是桃姐服伺Roger，后来变成了Roger对桃姐无微不至的关心，看了这部电影后，我觉得有时间就应该多点关爱一下身边的老人，相见时难别亦难，不应该真的等到失去才懂得珍惜，到那个时候就一切都晚了。&lt;/p&gt;

&lt;p&gt;  后来回到了学校，听之前去过的老油条们说：那些老人那么积极去那些教室是因为有票可以给她们换东西。听到这个信息时我顿时被震惊了一下，原来这个社会还是挺现实挺骨感的，仿佛利益才是大家好好生活的最大驱动力。去老人院之前，我还真以为这是一次非常有意义的活动，但现在我可不敢再这么说了，在完全步入社会之前能够有此番经历，实在是人生一大笔财富啊。虽然我的确看到了那些标着价格的商品放在老人院那里，但是也不能够完全否定那些真正需要帮助，真正想要交流的老人，他们才值得我们去尊敬去爱戴。&lt;/p&gt;

&lt;p&gt;  我们每一天都在变老，等到我们也成为了老人，我们也可能会变得行动迟缓，对外输出的价值渐渐下降，到那个时候，估计我们也渴望身边能有至亲至爱的人可以跟我们沟通，渴望身边有人能倾听我们讲故事吧。听另一位教老人英语的同学说他教的那个老人总是在说“人老了，不中用了！”，这位同学说自己也很无奈，也想不出什么能反驳他的，当然这位老人也挺值得怜悯一下的，但也非常值得我们尊敬，因为即使上到了这样的年纪还有意向学习英语，这是多么难能可贵的一种精神啊，比作是我们现在身边的一些同学，可谓是差了一个天壤之别。他们教英语的同学生怕自己发音误导了老人，于是乎对每一个单词他们都掏出自己的手机查一下之后再放语音给老人们听，这些同学干得非常细心，但令我感到好奇的是他们平时学习也是这么细心的吗？这我就不去深究了，但这些同学的做法是值得去肯定的。&lt;/p&gt;

&lt;p&gt;  在这次老人院之行中，还有令我印象比较深刻的是一位老人，她想要听音乐，问我应该怎么操作，我就向她秀了一波操作，之后她拿出了一个本子，叫我把这些步骤写在那个本子上面，在我不在那里的时候可以自己看看，当时我拿起那个本子看了看，上面都写满了各个软件的基本操作，不仔细看的话还以为是软件使用说明书，我参考了前面的一些例子，也用了像Word文档初号般的字体大小分步骤写下了如何实现听音乐这一操作，我被这位老奶奶的举动给折服了，看着那满满的笔记本，自己都觉得活到老学到老这句话说得没错啊。就像以前有一样东西叫万能充，但现在却什么都不能充了，如果不改变自己的话，迟早要被淘汰呀，与时俱进真的非常重要，即使上了年纪，也不应该放弃学习，学习不一定使我们快乐，但一旦用上了学习而来的知识肯定能让我们感到非常满足，因为我们能够使用自己学习而来的知识去帮助他人，哪怕只是微不足道的帮助，哪怕只是那些在我们眼里想当然的地方，在别人眼里可能就是照亮他们深处某个黑色的角落，使他们对这个世界有个更深的认识。也许就在一个瞬间，大家可能就有了那么一点共鸣。&lt;/p&gt;
</description>
        <pubDate>Fri, 28 Apr 2017 02:26:10 +0800</pubDate>
        <link>http://localhost:4000/%E7%94%9F%E6%B4%BB/2017/04/28/%E8%AE%B0%E5%B9%BF%E5%B7%9E%E8%80%81%E4%BA%BA%E9%99%A2%E4%B8%80%E8%A1%8C.html</link>
        <guid isPermaLink="true">http://localhost:4000/%E7%94%9F%E6%B4%BB/2017/04/28/%E8%AE%B0%E5%B9%BF%E5%B7%9E%E8%80%81%E4%BA%BA%E9%99%A2%E4%B8%80%E8%A1%8C.html</guid>
        
        
        <category>生活</category>
        
      </item>
    
  </channel>
</rss>
